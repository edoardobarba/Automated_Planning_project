(define (domain domain3)
    (:requirements :strips :typing :hierachie :negative-preconditions)
    (:types 
        person - object
        robot - object
        crane - object
        box - object
        location - object
        item - object
        carrier - object
    )
	
	 (:predicates 
        
        ; (is_truck ?r - r) ;; robot r is a truck
        ; (is_helicopter ?r - r) ;; robot r is an helicopter   
        (belongs_carrier ?a - carrier ?r - robot)   ;; carrier c belongs to robot r
        (belongs_crane ?c - crane ?r - robot)   ;; crane c belongs to robot r
        (on ?b - box ?a - carrier)  ;; box b is on carrier c
        (at_b ?b - box ?l - location) ;; box b is at location l 
        (at_p ?p - person ?l - location) ;; person p is at location l
        (at_r ?r - robot ?l - location) ;; robot r is at location l
        (at_i ?i - item ?l - location)  ;; item i is at location i
        (inside ?i - item ?b - box)   ;; item i is inside box b
        (is_empty_c ?c - crane) ;; crane c is empty
        ; (holding_box ?c - crane ?b - box) ;; crane c holds box b
        (holding_item ?c - crane ?i - item)
        (is_food ?i - item) ;; item i is food
        (is_medicine ?i - item) ;; item i is medicine
        (is_tool ?i - item) ;; item i is tools
        (need_food ?p - person) ;; person p need food
        (need_medicine ?p - person) ;; person p need medicine
        (need_tool ?p - person) ;; person p need tool
        ;; for the assumption of having 1 capacity we using these predicates
        (is_full ?a - carrier)
    )

    ; (:functions 
    ;   (max_capacity_carrier) ;max capacity of carrier
    ;   (max_capacity_box) ;max capacity of box
    ;   (box_count ?c - carrier) ;number of boxes on the carrier c
    ;   (item_count ?b - box) ;number of items on the box b
    ; )
    ;;;;;;; Non PRIMative tasks  
    (:task deliver_box
      :parameters (?b - box ?l1 - location ?l2 - location)
      :precondition ()
      :effect ()
    )
    (:task catch_item_put_in_box
      :parameters (?b - box ?i - item)
      :precondition ()
      :effect ()
    )
    (:task deliver_food
      :parameters (?r - robot  ?p - person)
      :precondition ()
      :effect ()
    )    
    (:task deliver_tool
      :parameters (?r - robot ?p - person)
      :precondition ()
      :effect ()
    )    
    (:task deliver_medicine
      :parameters (?r - robot ?p - person)
      :precondition ()
      :effect ()
    )    
    ;;;;;;; PRIMative tasks
    ;;; tasks to load and unload box from the robot
    (:task load_box_on_robot
      :parameters (?r - robot ?b - box)
      :precondition ()
      :effect ()
    )
    (:task unload_box_on_robot
      :parameters (?r - robot ?b - box)
      :precondition ()
      :effect ()
    )
    ;;; tasks to go to a specfic place 
    (:task goto
      :parameters (?r - robot ?l - location)
      :precondition ()
      :effect ()
    )
    ;; this was missing show edoardo tommorow
    (:task pick_up_item_from_box
      :parameters (?r - robot ?b - box)
      :precondition ()
      :effect ()
    )
    ;;; tasks to pick up and pick down in the box
    (:task pick_up_item_from_location
      :parameters (?r - robot ?l - location)
      :precondition ()
      :effect ()
    )
    (:task put_down_item_in_box
      :parameters (?r - robot ?b - box)
      :precondition ()
      :effect ()
    )
    ;;; tasks to give a person a specific object
    (:task put_down_food
      :parameters (?r - robot ?i - item ?p - person)
      :precondition ()
      :effect ()
    )
    (:task put_down_tool
      :parameters (?r - robot ?i - item ?p - person)
      :precondition ()
      :effect ()
    )
    (:task put_down_medicine
      :parameters (?r - robot ?i - item ?p - person)
      :precondition ()
      :effect ()
    )

    ;;;;;;; NonPRIMative method
    (:method m_deliver_box
      :parameters (?b - box ?l1 - location ?l2 - location ?r - robot)
      :task (deliver_box ?b ?l1 ?l2)
      :subtasks (and
      (task0 (goto ?r ?l1)); so we do task goto to location 1
      (task1 (load_box_on_robot ?r ?b)); so we do task loadonrobot 
      (task2 (goto ?r ?l2)); so we do task goto location2
      (task3 (unload_box_on_robot ?r ?b));so we unload the box
      )
      :ordering (and
        (task0 < task1)
        (task1 < task2)
        (task2 < task3)
      )
    )
    (:method m_catch_item_put_in_box
      :parameters (?b - box ?l1 - location ?r - robot ?i - item)
      :task (catch_item_put_in_box ?b ?i)
      :subtasks (and
      (task0 (goto ?r ?l1)); so we do task goto to location 1
      (task1 (pick_up_item_from_location ?r ?l1))
      (task2 (put_down_item_in_box ?r ?b))
      )
      :ordering (and
        (task0 < task1)
        (task1 < task2)
      )
    )
    (:method m_catch_item_put_in_box_2
      :parameters (?b - box ?l1 - location ?l2 - location ?r - robot ?i - item)
      :task (catch_item_put_in_box ?b ?i)
      :subtasks (and
      (task0 (deliver_box ?b ?l2 ?l1)); so we do task goto to location 1
      (task1 (pick_up_item_from_location ?r ?l1))
      (task2 (put_down_item_in_box ?r ?b))
      )
      :ordering (and
        (task0 < task1)
        (task1 < task2)
      )
    )
    (:method m_deliver_food
      :parameters (?b - box  ?i - item ?l1 - location ?l2 - location ?r - robot ?p - person)
      :task (deliver_food ?r ?p)
      :subtasks (and
      (task0 (catch_item_put_in_box ?b ?i))
      (task1 ( deliver_box ?b ?l1 ?l2))
      (task2 (pick_up_item_from_box ?r ?b) )
      (task3 (put_down_food ?r ?i ?p) )
      )
      :ordering (and
        (task0 < task1)
        (task1 < task2)
        (task2 < task3)
      )
    )
    (:method m_deliver_tool
      :parameters (?b - box  ?i - item ?l1 - location ?l2 - location ?r - robot ?p - person)
      :task (deliver_tool ?r ?p)
      :subtasks (and
      (task0 (catch_item_put_in_box ?b ?i))
      (task1 ( deliver_box ?b ?l1 ?l2))
      (task2 (pick_up_item_from_box ?r ?b) )
      (task3 (put_down_tool ?r ?i ?p) )
      )
      :ordering (and
        (task0 < task1)
        (task1 < task2)
        (task2 < task3)
      )
    )
    (:method m_deliver_medicine
      :parameters (?b - box  ?i - item ?l1 - location ?l2 - location ?r - robot ?p - person)
      :task (deliver_medicine ?r ?p)
      :subtasks (and
      (task0 (catch_item_put_in_box ?b ?i))
      (task1 ( deliver_box ?b ?l1 ?l2))
      (task2 (pick_up_item_from_box ?r ?b) )
      (task3 (put_down_medicine ?r ?i ?p) )
      )
      :ordering (and
        (task0 < task1)
        (task1 < task2)
        (task2 < task3)
      )
    )
    ;;;;;;; PRIMative method
  ;; methods to load box and unload box
    (:method m_load_box
      :parameters (?b - box ?r - robot ?c - crane ?l - location ?a - carrier )
      :task (load_box_on_robot ?r ?b)
      :subtasks (and
      (task0 (load_box ?b ?r ?c ?l ?a ))
      )
    )
    (:method m_unload_box
      :parameters (?b - box ?r - robot ?c - crane ?l - location ?a - carrier )
      :task (unload_box_on_robot ?r ?b)
      :subtasks (and
      (task0 (unload_box ?b ?r ?c ?l ?a ))
      )
    )
  ;; methods to move to a specific location

    (:method m_goto_location
      :parameters (?r - robot ?from - location ?to - location ?c - crane)
      :task (goto ?r ?to)
      :subtasks (and
      (task0 (move_robot ?r ?from ?to ?c)); Move teh robot from location from to 
      )
    )
    (:method m_goto_I_am_at_location
      :parameters (?r - robot ?l - location)
      :task (goto ?r ?l)
      :subtasks (and
      (task0 (noop ?r ?l)); I am at the current location
      )
    )
  ;; methods to pic up items from location and put in the box
  (:method m_pick_up_item_from_location
      :parameters (?i - item ?l - location ?c - crane ?r - robot)
      :task (pick_up_item_from_location  ?r ?l )
      :subtasks (and
      (task0 (pickup_item_from_location ?i ?l ?c ?r ));; I am picking up something from a specific location
      )
    )
  (:method m_put_down_item_in_box
      :parameters (?i - item ?l - location ?c - crane ?r - robot ?b - box)
      :task (put_down_item_in_box ?r ?b)
      :subtasks (and
      (task0 (put_item_in_box ?i ?b ?l ?c  ?r ));; I am putting the item in the box
      )
  )
  ;;;; method to pick up item from the box show edoaro tommorow
  (:method m_pick_item_from_box
      :parameters (?i - item ?b - box ?l - location ?c - crane ?r - robot)
      :task (pick_up_item_from_box ?r ?b)
      :subtasks (and
      (task0 (pick_item_from_box ?i ?b ?l ?c  ?r ));; I am putting the item in the box
      )
    )
  ;; methods to put specific items to a person 
  (:method m_put_down_food
      :parameters (?i - item ?l - location ?c - crane ?r - robot ?p - person)
      :task (put_down_food ?r ?i ?p)
      :subtasks (and
      (task0 (pickdown_food ?i ?l  ?c  ?r  ?p ))
      )
    )
  (:method m_put_down_tool
      :parameters (?i - item ?l - location ?c - crane ?r - robot ?p - person)
      :task (put_down_tool ?r ?i ?p)
      :subtasks (and
      (task0 (pickdown_tool ?i ?l  ?c  ?r  ?p ))
      )
    )
  (:method m_put_down_medicine
      :parameters (?i - item ?l - location ?c - crane ?r - robot ?p - person)
      :task (put_down_medicine ?r ?i ?p)
      :subtasks (and
      (task0 (pickdown_medicine ?i ?l  ?c  ?r  ?p ))
      )
    )
;; ACTIONS
    (:action move_robot
      :parameters (?r - robot ?from ?to - location ?c - crane)
      :precondition (and (at_r ?r ?from) (is_empty_c ?c) (belongs_crane ?c ?r) (not (at_r ?r ?to)))
      :effect (and (at_r ?r ?to)
              (not (at_r ?r ?from)))
    )

  (:action load_box
      :parameters (?b - box ?r - robot ?c - crane ?l - location ?a - carrier )
      :precondition (and (at_r ?r ?l) (at_b ?b ?l) (belongs_crane ?c ?r) (belongs_carrier ?a ?r) (is_empty_c ?c) (not(is_full ?a))) 
      :effect (and (not(at_b ?b ?l)) (on ?b ?a) (is_full ?a))
    )

  (:action unload_box
        :parameters (?b - box ?r - robot ?c - crane ?l - location ?a - carrier)
        :precondition (and (at_r ?r ?l) (on ?b ?a) (belongs_carrier ?a ?r) (belongs_crane ?c ?r) (is_empty_c ?c))
        :effect (and (not (on ?b ?a)) (at_b ?b ?l) ( not (is_full ?a)))
    )

  (:action pickup_item_from_location
      :parameters (?i - item ?l - location ?c - crane ?r - robot)
      :precondition (and (at_r ?r ?l) (at_i ?i ?l) (is_empty_c ?c) (belongs_crane ?c ?r))
      :effect (and (not(at_i ?i ?l)) (not (is_empty_c ?c)) (holding_item ?c ?i))
    )

  (:action put_item_in_box
      :parameters (?i - item ?b - box ?l - location ?c - crane ?r - robot)
      :precondition (and (holding_item ?c ?i) (at_b ?b ?l) (at_r ?r ?l) (belongs_crane ?c ?r))
      :effect (and (inside ?i ?b) (not(at_i ?i ?l)) (is_empty_c ?c) (not(holding_item ?c ?i)))
    )

  (:action pick_item_from_box
      :parameters (?i - item ?b - box ?l - location ?c - crane ?r - robot)
      :precondition (and (at_b ?b ?l) (at_r ?r ?l) (is_empty_c ?c) (inside ?i ?b) (belongs_crane ?c ?r))
      :effect (and (holding_item ?c ?i) (not (inside ?i ?b)) (not(is_empty_c ?c)))
    )

  (:action pickdown_food
      :parameters (?i - item ?l - location ?c - crane ?r - robot ?p - person)
      :precondition (and 
                        (need_food ?p) 
                        (is_food ?i)
                        (at_p ?p ?l)
                        (at_r ?r ?l)
                        (holding_item ?c ?i)
                        (belongs_crane ?c ?r)
                    )
      :effect (and  (not(need_food ?p))
                    (is_empty_c ?c)
                    (not(holding_item ?c ?i)))
	   				) 

  (:action pickdown_tool
      :parameters (?i - item ?l - location ?c - crane ?r - robot ?p - person)
      :precondition (and 
                        (need_tool ?p) 
                        (is_tool ?i)
                        (at_p ?p ?l)
                        (at_r ?r ?l)
                        (holding_item ?c ?i)
                        (belongs_crane ?c ?r)
                    )
      :effect (and  (not(need_tool ?p))
                    (is_empty_c ?c)
                    (not(holding_item ?c ?i))
	   				) 
      
	)

  (:action pickdown_medicine
      :parameters (?i - item ?l - location ?c - crane ?r - robot ?p - person)
      :precondition (and 
                        (need_medicine ?p) 
                        (is_medicine ?i)
                        (at_p ?p ?l)
                        (at_r ?r ?l)
                        (holding_item ?c ?i)
                        (belongs_crane ?c ?r)
                    )
      :effect (and  (not(need_medicine ?p))
                    (is_empty_c ?c)
                    (not(holding_item ?c ?i))
	   				) 
)
(:action noop
		:parameters (?r - robot ?l - location)
		:precondition
			(and
				(at_r ?r ?l)
			)
		:effect ()
	)
)